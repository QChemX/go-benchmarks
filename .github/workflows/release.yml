name: Build and Release Go Binaries

on:
  push:
    branches: [ main ]

jobs:
  # --- Step 1: version calculation (only runs once) ---
  versioning:
    runs-on: ubuntu-latest
    outputs:
      next_tag: ${{ steps.semver.outputs.next_tag }}
      release_notes: ${{ steps.notes.outputs.release_notes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous release tag (or default)
        id: prev_tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          prev_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || true)
          if [ -z "$prev_tag" ]; then prev_tag="v0.0.0"; fi
          echo "prev_tag=$prev_tag" >> $GITHUB_ENV
          echo "prev_tag=$prev_tag"

      - name: Read latest commit message
        id: commit_msg
        run: |
          git log -1 --pretty=%B > .commit_message.txt
          msg="$(cat .commit_message.txt)"
          echo "msg<<EOF" >> $GITHUB_ENV
          echo "$msg" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Calculate next version (semantic)
        id: semver
        run: |
          prev="${{ env.prev_tag }}"
          msg="$(cat <<< "${{ env.msg }}")"

          if [[ "$prev" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
          else
            major=0; minor=1; patch=0
          fi

          if grep -qiE 'BREAKING CHANGE:' <<< "$msg"; then
            major=$((major+1)); minor=0; patch=0
          elif grep -qiE '^feat:' <<< "$msg"; then
            minor=$((minor+1)); patch=0
          else
            patch=$((patch+1))
          fi

          next="v${major}.${minor}.${patch}"
          echo "next_tag=$next" >> $GITHUB_ENV
          echo "::set-output name=next_tag::$next"

      - name: Generate release notes
        id: notes
        run: |
          if [ "${{ env.prev_tag }}" = "v0.0.0" ]; then
            range="$(git rev-list --max-parents=0 HEAD)..HEAD"
          else
            range="${{ env.prev_tag }}..HEAD"
          fi
          notes="$(git log $range --pretty=format:'- %s (%an)')"
          {
            echo "release_notes<<EOF"
            echo "$notes"
            echo "EOF"
          } >> $GITHUB_ENV
          echo "::set-output name=release_notes::$notes"

  # --- Step 2: build matrix ---
  build:
    needs: versioning
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: ".exe"
          - os: macos-13
            goos: darwin
            goarch: amd64
            ext: ""
          - os: macos-latest
            goos: darwin
            goarch: arm64
            ext: ""
    runs-on: ${{ matrix.os }}
    env:
      APP_NAME: benchmarks
      CGO_ENABLED: "0"
      BUILD_TAGS: "netgo osusergo"
      COMMON_LDFLAGS: "-s -w -buildid="
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5

      - name: Go env & deps
        run: |
          go env
          go mod download

      - name: Build binary
        run: |
          mkdir -p dist
          ENTRY="./main.go"
          if [ ! -f "$ENTRY" ]; then
            echo "ERROR: $ENTRY not found"
            exit 1
          fi

          # Linux 要求静态链接
          ldflags="${COMMON_LDFLAGS}"
          if [ "${{ matrix.goos }}" = "linux" ]; then
            ldflags="$ldflags -extldflags \"-static\""
          fi

          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
          go build -trimpath -tags "${BUILD_TAGS}" \
            -ldflags "$ldflags" \
            -o "dist/${APP_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}" \
            "$ENTRY"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  # --- Step 3: publish release ---
  release:
    needs: [versioning, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.versioning.outputs.next_tag }}
          name: Release ${{ needs.versioning.outputs.next_tag }}
          body: ${{ needs.versioning.outputs.release_notes }}
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
