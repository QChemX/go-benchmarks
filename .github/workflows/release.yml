name: Build and Release Go Binaries

on:
  push:
    branches:
      - main

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      next_tag: ${{ steps.calc.outputs.next_tag }}
      release_notes: ${{ steps.notes.outputs.release_notes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --tags

      - name: Get previous tag
        id: prev
        run: |
          prev=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "prev_tag=$prev" >> $GITHUB_ENV
          echo "Previous tag: $prev"

      - name: Read latest commit message
        id: msg
        run: |
          commit_msg="$(git log -1 --pretty=%B)"
          echo "commit_msg<<EOF" >> $GITHUB_ENV
          echo "$commit_msg" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Calculate next version
        id: calc
        shell: bash
        run: |
          prev="${{ env.prev_tag }}"
          msg="${{ env.commit_msg }}"

          if [[ -z "$prev" || "$prev" == "" ]]; then
            next="v0.1.0"
          elif [[ "$prev" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}

            if [[ "$msg" == *"BREAKING CHANGE:"* ]]; then
              major=$((major+1))
              minor=0
              patch=0
            elif [[ "$msg" == feat:* ]]; then
              minor=$((minor+1))
              patch=0
            else
              patch=$((patch+1))
            fi

            next="v$major.$minor.$patch"
          else
            echo "Invalid previous tag format: $prev"
            exit 1
          fi

          echo "next_tag=$next" >> $GITHUB_OUTPUT
          echo "Next tag: $next"

      - name: Generate release notes
        id: notes
        shell: bash
        run: |
          if [[ -z "$prev" || "$prev" == "" ]]; then
            range="$(git rev-list --max-parents=0 HEAD)..HEAD"
          else
            range="$prev..HEAD"
          fi
          notes="$(git log $range --pretty=format:'- %s (%an)')"
          echo "release_notes<<EOF" >> $GITHUB_ENV
          echo "$notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "::set-output name=release_notes::$notes"

  build:
    needs: get_version
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: ".exe"
          - os: macos-13
            goos: darwin
            goarch: amd64
            ext: ""
          - os: macos-14
            goos: darwin
            goarch: arm64
            ext: ""
    runs-on: ${{ matrix.os }}
    env:
      APP_NAME: benchmarks
      CGO_ENABLED: "0"
      BUILD_TAGS: "netgo osusergo"
      COMMON_LDFLAGS: "-s -w -buildid="
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Go env & deps
        run: |
          go env
          go mod download

      - name: Build binary
        shell: bash
        run: |
          mkdir -p dist
          ENTRY="./main.go"
          if [ ! -f "$ENTRY" ]; then
            echo "ERROR: $ENTRY not found"
            exit 1
          fi

          ldflags="${COMMON_LDFLAGS}"
          if [ "${{ matrix.goos }}" = "linux" ]; then
            ldflags="$ldflags -extldflags \"-static\""
          fi

          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
            go build -trimpath -tags "${BUILD_TAGS}" \
            -ldflags "$ldflags" \
            -o "dist/${APP_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext}}" \
            "$ENTRY"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  release:
    needs: [get_version, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get_version.outputs.next_tag }}
          name: Release ${{ needs.get_version.outputs.next_tag }}
          body: ${{ needs.get_version.outputs.release_notes }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
