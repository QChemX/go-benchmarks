name: Release

on:
  push:
    branches:
      - main

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      next_tag: ${{ steps.calc.outputs.next_tag }}
      release_notes: ${{ steps.notes.outputs.release_notes }}

    steps:
      - uses: actions/checkout@v4

      - name: Get previous tag
        id: prev
        run: |
          prev_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "prev_tag=$prev_tag" >> $GITHUB_OUTPUT

      - name: Read latest commit message safely
        id: msg
        run: |
          commit_msg="$(git log -1 --pretty=%B)"
          echo "commit_msg<<EOF" >> $GITHUB_OUTPUT
          echo "$commit_msg" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: calc
        shell: bash
        run: |
          prev="${{ steps.prev.outputs.prev_tag }}"
          msg="${{ steps.msg.outputs.commit_msg }}"

          if [[ -z "$prev" || "$prev" == "" ]]; then
            next="v0.1.0"
          elif [[ "$prev" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}

            if [[ "$msg" == *"BREAKING CHANGE:"* ]]; then
              major=$((major+1)); minor=0; patch=0
            elif [[ "$msg" == feat:* ]]; then
              minor=$((minor+1)); patch=0
            else
              patch=$((patch+1))
            fi

            next="v$major.$minor.$patch"
          else
            echo "Invalid previous tag format: $prev"
            exit 1
          fi

          echo "next_tag=$next" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: notes
        shell: bash
        run: |
          prev="${{ steps.prev.outputs.prev_tag }}"
          if [[ -z "$prev" || "$prev" == "" ]]; then
            range="$(git rev-list --max-parents=0 HEAD)..HEAD"
          else
            range="$prev..HEAD"
          fi

          notes="$(git log $range --pretty=format:'- %s (%an)')"
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$notes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build:
    needs: get_version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build
        run: |
          mkdir -p dist
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o dist/app-${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  release:
    needs: [get_version, build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get_version.outputs.next_tag }}
          name: Release ${{ needs.get_version.outputs.next_tag }}
          body: ${{ needs.get_version.outputs.release_notes }}
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
